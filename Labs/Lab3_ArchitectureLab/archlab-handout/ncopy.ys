#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
        # Loop header

	iaddq  $-6, %rdx        # len -= 6
       	jl     Extra           

Loop:	mrmovq (%rdi), %r10	# %r10 = src
	mrmovq 8(%rdi), %r11    # %r11 = src[i+1]
        rmmovq %r10, (%rsi)     # dst = src[i]
        andq   %r10, %r10	# check if src[i] <= 0
        jle    Npos0  	 
        iaddq  $1, %rax         # count++
Npos0:
	rmmovq %r11, 8(%rsi)    # dst = src[i+1]
	andq   %r11, %r11       # check if %r11 <= 0?
  	jle    Npos1    
	iaddq  $1, %rax         # count++

Npos1:
	mrmovq 16(%rdi), %r10   # %r10 = src[i+2]
        mrmovq 24(%rdi), %r11   # %r11 = src[i+3]
  	rmmovq %r10, 16(%rsi)   # dst[i+2]= src[i+2]
	andq   %r10, %r10       # check if src[i+2] <= 0
	jle    Npos2           
	iaddq  $1, %rax         # count ++

Npos2:
	rmmovq %r11, 24(%rsi)   # dst = src[i+3]
	andq   %r11, %r11       # check if src[i+3] <= 0
	jle    Npos3           
	iaddq  $1, %rax         # count++

Npos3:
	mrmovq 32(%rdi), %r10   # %r10 = src[i+4]
	mrmovq 40(%rdi), %r11   # %r11 = src[i+5]
	rmmovq %r10, 32(%rsi)   # dst[i+4] = src[i+4]
	andq   %r10, %r10       # check if src[i+4] <= 0
	jle    Npos4            
	iaddq  $1, %rax         # count++

Npos4:
	rmmovq %r11, 40(%rsi)   # dst = src[i+5]
	andq   %r11, %r11       # check if %r11 <= 0
	jle    Unroll       
	iaddq  $1, %rax         # count++


Unroll:
	iaddq $48, %rdi         # unroll src[i+6]
	iaddq $48, %rsi         # unroll dst[i+6]
	iaddq $-6, %rdx         # len -= 6
	jge   Loop             

Extra:
	iaddq $6, %rdx          # len += 6

Extra0:       	  		# unroll 6 indices later
	iaddq  $-1, %rdx        # len--
	jl     Done             
	mrmovq (%rdi), %r10     
	mrmovq 8(%rdi), %r11   
	rmmovq %r10, (%rsi)    
	andq   %r10, %r10      
	jle    Extra1          
	iaddq  $1, %rax         # count++

Extra1:
	iaddq  $-1, %rdx        # len--
	jl     Done            
	rmmovq %r11, 8(%rsi)    # dst[i+1] = src [i+1]
	andq   %r11, %r11       # check if src [i+1] <= 0
	jle    Extra2           
	iaddq  $1, %rax         # count++

Extra2:
	iaddq  $-1, %rdx        # len--
	jl     Done             
	mrmovq 16(%rdi), %r10   # %r10 = src[i+2] 
	mrmovq 24(%rdi), %r11   # %r11 = src[i+3]
	rmmovq %r10, 16(%rsi)   # dst[i+2] = src[i+2]
	andq   %r10, %r10       # check if src[i+2] <= 0
	jle    Extra3          
	iaddq  $1, %rax         # count++

Extra3:
	iaddq  $-1, %rdx        # len--
        jl     Done	       
        rmmovq %r11, 24(%rsi)   # dst[i+3] = src[i+3]
        andq   %r11, %r11       # check if src[i+3] <= 0
        jle    Extra4           
        iaddq  $1, %rax 	# count++
Extra4:
	iaddq  $-1, %rdx        # len--
	jl     Done            
	mrmovq 32(%rdi), %r10   # %r10 = src[i+4] 
	rmmovq %r10, 32(%rsi)   # dst[i+4] = src[i+4] 
	andq   %r10, %r10       # check if src[i+4] <= 0
	jle    Done             
	iaddq  $1, %rax         # count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
